{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { addDoc } from \"firebase/firestore/lite\";\nimport { getStorage } from \"firebase/storage\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getFirestore, collection, getDocs, doc, updateDoc } from \"firebase/firestore/lite\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDVIvkrPwW76arrnIUjsGN1-jcBlfbHpWA\",\n  authDomain: \"realestateclub-584d7.firebaseapp.com\",\n  projectId: \"realestateclub-584d7\",\n  storageBucket: \"realestateclub-584d7.appspot.com\",\n  messagingSenderId: \"457631501672\",\n  appId: \"1:457631501672:web:df25a3429bb68aecc31add\",\n  measurementId: \"G-90QFHNY9H8\"\n};\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nconst db = getFirestore(app);\nconst storage = getStorage(app);\n\n// Get a list of userProfiles from databse\nasync function getUsers() {\n  const userProfileCollection = collection(db, \"userProfile\");\n  const userProfileDocuments = await getDocs(userProfileCollection);\n  const userList = [];\n  userProfileDocuments.docs.forEach(doc => {\n    const data = doc.data();\n    data.id = doc.id;\n    userList.push(data);\n  });\n  return userList;\n}\n\n// function to update firebase docs\nasync function updateUserData(id, data) {\n  console.log(id);\n  console.log(data);\n  const userInfo = doc(db, \"userProfile\", id);\n  await updateDoc(userInfo, data);\n}\nasync function addNewProfile(data) {\n  const userProfileCollection = collection(db, \"userProfile\");\n  const docRef = await addDoc(userProfileCollection, data);\n  return docRef.id; // returns the new document reference ID\n}\nexport { getUsers, db, updateUserData, addNewProfile, storage };","map":{"version":3,"names":["initializeApp","addDoc","getStorage","getAnalytics","getFirestore","collection","getDocs","doc","updateDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","db","storage","getUsers","userProfileCollection","userProfileDocuments","userList","docs","forEach","data","id","push","updateUserData","console","log","userInfo","addNewProfile","docRef"],"sources":["/Users/emiller3425/realEstateClub/web/src/firebase.jsx"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { addDoc } from \"firebase/firestore/lite\";\nimport { getStorage } from \"firebase/storage\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport {\n  getFirestore,\n  collection,\n  getDocs,\n  doc,\n  updateDoc,\n} from \"firebase/firestore/lite\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDVIvkrPwW76arrnIUjsGN1-jcBlfbHpWA\",\n    authDomain: \"realestateclub-584d7.firebaseapp.com\",\n    projectId: \"realestateclub-584d7\",\n    storageBucket: \"realestateclub-584d7.appspot.com\",\n    messagingSenderId: \"457631501672\",\n    appId: \"1:457631501672:web:df25a3429bb68aecc31add\",\n    measurementId: \"G-90QFHNY9H8\"\n  };\n\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nconst db = getFirestore(app);\nconst storage = getStorage(app);\n\n// Get a list of userProfiles from databse\nasync function getUsers() {\n  const userProfileCollection = collection(db, \"userProfile\");\n  const userProfileDocuments = await getDocs(userProfileCollection);\n  const userList = [];\n\n  userProfileDocuments.docs.forEach((doc) => {\n    const data = doc.data();\n    data.id = doc.id;\n    userList.push(data);\n  });\n  return userList;\n}\n\n// function to update firebase docs\nasync function updateUserData(id, data) {\n  console.log(id);\n  console.log(data);\n  const userInfo = doc(db, \"userProfile\", id);\n  await updateDoc(userInfo, data);\n}\n\nasync function addNewProfile(data) {\n  const userProfileCollection = collection(db, \"userProfile\");\n  const docRef = await addDoc(userProfileCollection, data);\n  return docRef.id; // returns the new document reference ID\n}\n\nexport { getUsers, db, updateUserData, addNewProfile, storage };"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,MAAM,QAAQ,yBAAyB;AAChD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SACEC,YAAY,EACZC,UAAU,EACVC,OAAO,EACPC,GAAG,EACHC,SAAS,QACJ,yBAAyB;AAEhC,MAAMC,cAAc,GAAG;EACnBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,sCAAsC;EAClDC,SAAS,EAAE,sBAAsB;EACjCC,aAAa,EAAE,kCAAkC;EACjDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;AAEH,MAAMC,GAAG,GAAGjB,aAAa,CAACS,cAAc,CAAC;AACzC,MAAMS,SAAS,GAAGf,YAAY,CAACc,GAAG,CAAC;AACnC,MAAME,EAAE,GAAGf,YAAY,CAACa,GAAG,CAAC;AAC5B,MAAMG,OAAO,GAAGlB,UAAU,CAACe,GAAG,CAAC;;AAE/B;AACA,eAAeI,QAAQA,CAAA,EAAG;EACxB,MAAMC,qBAAqB,GAAGjB,UAAU,CAACc,EAAE,EAAE,aAAa,CAAC;EAC3D,MAAMI,oBAAoB,GAAG,MAAMjB,OAAO,CAACgB,qBAAqB,CAAC;EACjE,MAAME,QAAQ,GAAG,EAAE;EAEnBD,oBAAoB,CAACE,IAAI,CAACC,OAAO,CAAEnB,GAAG,IAAK;IACzC,MAAMoB,IAAI,GAAGpB,GAAG,CAACoB,IAAI,CAAC,CAAC;IACvBA,IAAI,CAACC,EAAE,GAAGrB,GAAG,CAACqB,EAAE;IAChBJ,QAAQ,CAACK,IAAI,CAACF,IAAI,CAAC;EACrB,CAAC,CAAC;EACF,OAAOH,QAAQ;AACjB;;AAEA;AACA,eAAeM,cAAcA,CAACF,EAAE,EAAED,IAAI,EAAE;EACtCI,OAAO,CAACC,GAAG,CAACJ,EAAE,CAAC;EACfG,OAAO,CAACC,GAAG,CAACL,IAAI,CAAC;EACjB,MAAMM,QAAQ,GAAG1B,GAAG,CAACY,EAAE,EAAE,aAAa,EAAES,EAAE,CAAC;EAC3C,MAAMpB,SAAS,CAACyB,QAAQ,EAAEN,IAAI,CAAC;AACjC;AAEA,eAAeO,aAAaA,CAACP,IAAI,EAAE;EACjC,MAAML,qBAAqB,GAAGjB,UAAU,CAACc,EAAE,EAAE,aAAa,CAAC;EAC3D,MAAMgB,MAAM,GAAG,MAAMlC,MAAM,CAACqB,qBAAqB,EAAEK,IAAI,CAAC;EACxD,OAAOQ,MAAM,CAACP,EAAE,CAAC,CAAC;AACpB;AAEA,SAASP,QAAQ,EAAEF,EAAE,EAAEW,cAAc,EAAEI,aAAa,EAAEd,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}